{
  "filename": "env.md",
  "__html": "<h1>初始化准备</h1>\n<h2>一、导入数据 Mariadb (MySQL) 数据库</h2>\n<p>demo示例依赖txlcn-demo数据库建表语句如下:</p>\n<pre><code class=\"language-$xslt\">DROP TABLE IF EXISTS `t_demo`;\nCREATE TABLE `t_demo`  (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `demo_field` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `group_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `unit_id` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `app_name` varchar(32) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,\n  `create_time` datetime(0) NULL DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 26 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;\n\n</code></pre>\n<p>TxManager依赖tx-manager数据库建表语句如下:</p>\n<pre><code class=\"language-$xslt\">DROP TABLE IF EXISTS `t_tx_exception`;\nCREATE TABLE `t_tx_exception`  (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `group_id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,\n  `unit_id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,\n  `mod_id` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,\n  `transaction_state` tinyint(4) NULL DEFAULT NULL,\n  `registrar` tinyint(4) NULL DEFAULT NULL COMMENT '-1 未知 0 Manager 通知事务失败， 1 client询问事务状态失败2 事务发起方关闭事务组失败',\n  `ex_state` tinyint(4) NULL DEFAULT NULL COMMENT '0 待处理 1已处理',\n  `create_time` datetime(0) NULL DEFAULT NULL,\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB AUTO_INCREMENT = 967 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;\n\n</code></pre>\n<h2>二、启动TxManager</h2>\n<p>TxManager主要配置如下:<br>\n参数配置说明见 <a href=\"setting/manager.html\">TxManager配置</a></p>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">spring.application.name</span>=<span class=\"hljs-string\">tx-manager</span>\n<span class=\"hljs-meta\">server.port</span>=<span class=\"hljs-string\">8069</span>\n\n<span class=\"hljs-meta\">spring.datasource.driver-class-name</span>=<span class=\"hljs-string\">com.mysql.jdbc.Driver</span>\n<span class=\"hljs-meta\">spring.datasource.url</span>=<span class=\"hljs-string\">jdbc:mysql://ip:port/tx-manager?characterEncoding=UTF-8</span>\n<span class=\"hljs-meta\">spring.datasource.username</span>=<span class=\"hljs-string\">user</span>\n<span class=\"hljs-meta\">spring.datasource.password</span>=<span class=\"hljs-string\">passwd</span>\n\n<span class=\"hljs-meta\">mybatis.configuration.map-underscore-to-camel-case</span>=<span class=\"hljs-string\">true</span>\n<span class=\"hljs-meta\">mybatis.configuration.use-generated-keys</span>=<span class=\"hljs-string\">true</span>\n\n</code></pre>\n<p>启动TxManager</p>\n<p><img src=\"img/tx_manager.png\" alt=\"tx-manager\"></p>\n<h2>三、准备注册中心</h2>\n<ul>\n<li>启动ZooKeeper (Dubbo)</li>\n<li>启动Consul (SpringCloud)</li>\n</ul>\n<h2>四、微服务模块代码（TxClient）</h2>\n<p><a href=\"dubbo.html\">Dubbo-Demo</a></p>\n<p><a href=\"springcloud.html\">SpringCloud-Demo</a></p>\n<h2>五、检验微服务间的分布式事务</h2>\n<p>（1）正常提交事务</p>\n<p>访问 发起方提供的Rest接口 <code>/txlcn?value=the-value</code>。发现事务全部提交<br>\n<img src=\"img/result.png\" alt=\"result\"></p>\n<p>（2）回滚事务</p>\n<p>修改微服务 发起方Client 业务，在返回结果前抛出异常，再请求Rest接口。发现发起方由于本地事务回滚，而参与方D、E，由于TX-LCN的协调，数据也回滚了。<br>\n<img src=\"img/error-result.png\" alt=\"error_result\"></p>\n",
  "link": "/en-us/docs/demo/env.html",
  "meta": {}
}