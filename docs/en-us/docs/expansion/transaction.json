{
  "filename": "transaction.md",
  "__html": "<h1>事务模式扩展</h1>\n<p>TX-LCN不仅仅支持LCN TXC TCC模式，也可以由开发者自定义符合TX-LCN控制原理的请求事务模型。</p>\n<h2>事务模式的接口定义</h2>\n<ol>\n<li>增加一种新的事务模式名称，不能与已有的模式重名,例如test模式。</li>\n</ol>\n<p>在使用新的模式时，只需要在业务上标准类型即可。如下：</p>\n<pre><code>\n    @TxTransaction(type = &quot;test&quot;)\n    @Transactional\n    public void test(){\n\n    }\n\n</code></pre>\n<ol start=\"2\">\n<li>实现<code>com.codingapi.tx.client.support.resouce.TransactionResourceExecutor</code>接口，处理db资源。</li>\n</ol>\n<pre><code>public interface TransactionResourceExecutor {\n\n    /**\n     * 获取资源连接\n     *\n     * @param connectionSupplier Connection提供者\n     * @return\n     * @throws Throwable\n     */\n    Connection proxyConnection(Supplier&lt;Connection&gt; connectionSupplier) throws Throwable;\n\n}\n\n\n</code></pre>\n<ol start=\"3\">\n<li>针对事务模型区分事务状态，事务状态有default 、starting、 running 三种状态。</li>\n</ol>\n<p>这三张状态是通过 <code>com.codingapi.tx.client.support.separate.TXLCNTransactionSeparator</code> 识别的，用户可以自定义识别器例如LCN的识别器，bean name中的<code>transaction_state_resolver_</code>是识别器名称的前缀。</p>\n<pre><code>@Slf4j\n@Component(&quot;transaction_state_resolver_lcn&quot;)\npublic class LCNTypeTransactionSeparator extends CustomizableTransactionSeparator {\n\n    private final TransactionAttachmentCache transactionAttachmentCache;\n\n    private final TracerHelper tracerHelper;\n\n    @Autowired\n    public LCNTypeTransactionSeparator(TransactionAttachmentCache transactionAttachmentCache, TracerHelper tracerHelper) {\n        this.transactionAttachmentCache = transactionAttachmentCache;\n        this.tracerHelper = tracerHelper;\n    }\n\n    @Override\n    public TXLCNTransactionState loadTransactionState(TxTransactionInfo txTransactionInfo) {\n\n        // 不存在GroupId时不自定义\n        if (tracerHelper.getGroupId() == null) {\n            return super.loadTransactionState(txTransactionInfo);\n        }\n\n        // 一个模块存在多个LCN类型的事务单元在一个事务内走DEFAULT\n        Optional&lt;TransactionUnitTypeList&gt; sameTransUnitTypeList =\n                transactionAttachmentCache.attachment(tracerHelper.getGroupId(), TransactionUnitTypeList.class);\n        if (sameTransUnitTypeList.isPresent() &amp;&amp; sameTransUnitTypeList.get().contains(&quot;lcn&quot;)) {\n            log.info(&quot;Default by LCN assert !&quot;);\n            return TXLCNTransactionState.DEFAULT;\n        }\n        return super.loadTransactionState(txTransactionInfo);\n    }\n}\n\n</code></pre>\n<ol start=\"4\">\n<li>实现不同状态下的事务控制 实现<code>com.codingapi.tx.client.support.separate.TXLCNTransactionControl</code> 接口处理业务。</li>\n</ol>\n<pre><code>\npublic interface TXLCNTransactionControl {\n\n    /**\n     * 业务代码执行前\n     *\n     * @param info\n     */\n    default void preBusinessCode(TxTransactionInfo info)throws BeforeBusinessException {\n\n    }\n\n    /**\n     * 执行业务代码\n     *\n     * @param info\n     * @throws Throwable\n     */\n    default Object doBusinessCode(TxTransactionInfo info) throws Throwable {\n        return info.getJoinPoint().proceed();\n    }\n\n\n    /**\n     * 业务代码执行失败\n     *\n     * @param info\n     * @param throwable\n     */\n    default void onBusinessCodeError(TxTransactionInfo info, Throwable throwable) {\n\n    }\n\n    /**\n     * 业务代码执行成功\n     *\n     * @param info\n     */\n    default void onBusinessCodeSuccess(TxTransactionInfo info, Object result) throws TxClientException {\n\n    }\n\n    /**\n     * 清场\n     *\n     * @param info\n     */\n    default void postBusinessCode(TxTransactionInfo info){\n\n    }\n}\n\n</code></pre>\n<p>例如 LCN starting状态下的处理实现,bean name <code>control_lcn_starting</code>是标准规范，control_+模式名称+状态名称:</p>\n<pre><code>@Service(value = &quot;control_lcn_starting&quot;)\n@Slf4j\npublic class LCNStartingTransaction implements TXLCNTransactionControl {\n\n    private final TransactionControlTemplate transactionControlTemplate;\n\n\n    @Autowired\n    public LCNStartingTransaction(TransactionControlTemplate transactionControlTemplate) {\n        this.transactionControlTemplate = transactionControlTemplate;\n    }\n\n    @Override\n    public void preBusinessCode(TxTransactionInfo info) throws BeforeBusinessException {\n        // 创建事务组\n        transactionControlTemplate.createGroup(\n                info.getGroupId(), info.getUnitId(), info.getTransactionInfo(), info.getTransactionType());\n\n        // LCN 类型事务需要代理资源\n        DTXLocal.makeProxy();\n    }\n\n    @Override\n    public void onBusinessCodeError(TxTransactionInfo info, Throwable throwable) {\n        DTXLocal.cur().setState(0);\n    }\n\n    @Override\n    public void onBusinessCodeSuccess(TxTransactionInfo info, Object result) {\n        DTXLocal.cur().setState(1);\n    }\n\n    @Override\n    public void postBusinessCode(TxTransactionInfo info) {\n        // RPC 关闭事务组\n        transactionControlTemplate.notifyGroup(\n                info.getGroupId(), info.getUnitId(), info.getTransactionType(), DTXLocal.cur().getState());\n    }\n}\n\n\n</code></pre>\n<p>说明：</p>\n<p>若增加的新的模式最好创建一个新的模块，然后调整pom增加该模块的支持即可。</p>\n",
  "link": "/en-us/docs/expansion/transaction.html",
  "meta": {}
}